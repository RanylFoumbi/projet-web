{
  "version": 3,
  "sources": ["../../deepmerge/dist/cjs.js", "../../vuex-persister/src/index.ts"],
  "sourcesContent": ["'use strict';\n\nvar isMergeableObject = function isMergeableObject(value) {\n\treturn isNonNullObject(value)\n\t\t&& !isSpecial(value)\n};\n\nfunction isNonNullObject(value) {\n\treturn !!value && typeof value === 'object'\n}\n\nfunction isSpecial(value) {\n\tvar stringValue = Object.prototype.toString.call(value);\n\n\treturn stringValue === '[object RegExp]'\n\t\t|| stringValue === '[object Date]'\n\t\t|| isReactElement(value)\n}\n\n// see https://github.com/facebook/react/blob/b5ac963fb791d1298e7f396236383bc955f916c1/src/isomorphic/classic/element/ReactElement.js#L21-L25\nvar canUseSymbol = typeof Symbol === 'function' && Symbol.for;\nvar REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for('react.element') : 0xeac7;\n\nfunction isReactElement(value) {\n\treturn value.$$typeof === REACT_ELEMENT_TYPE\n}\n\nfunction emptyTarget(val) {\n\treturn Array.isArray(val) ? [] : {}\n}\n\nfunction cloneUnlessOtherwiseSpecified(value, options) {\n\treturn (options.clone !== false && options.isMergeableObject(value))\n\t\t? deepmerge(emptyTarget(value), value, options)\n\t\t: value\n}\n\nfunction defaultArrayMerge(target, source, options) {\n\treturn target.concat(source).map(function(element) {\n\t\treturn cloneUnlessOtherwiseSpecified(element, options)\n\t})\n}\n\nfunction getMergeFunction(key, options) {\n\tif (!options.customMerge) {\n\t\treturn deepmerge\n\t}\n\tvar customMerge = options.customMerge(key);\n\treturn typeof customMerge === 'function' ? customMerge : deepmerge\n}\n\nfunction getEnumerableOwnPropertySymbols(target) {\n\treturn Object.getOwnPropertySymbols\n\t\t? Object.getOwnPropertySymbols(target).filter(function(symbol) {\n\t\t\treturn Object.propertyIsEnumerable.call(target, symbol)\n\t\t})\n\t\t: []\n}\n\nfunction getKeys(target) {\n\treturn Object.keys(target).concat(getEnumerableOwnPropertySymbols(target))\n}\n\nfunction propertyIsOnObject(object, property) {\n\ttry {\n\t\treturn property in object\n\t} catch(_) {\n\t\treturn false\n\t}\n}\n\n// Protects from prototype poisoning and unexpected merging up the prototype chain.\nfunction propertyIsUnsafe(target, key) {\n\treturn propertyIsOnObject(target, key) // Properties are safe to merge if they don't exist in the target yet,\n\t\t&& !(Object.hasOwnProperty.call(target, key) // unsafe if they exist up the prototype chain,\n\t\t\t&& Object.propertyIsEnumerable.call(target, key)) // and also unsafe if they're nonenumerable.\n}\n\nfunction mergeObject(target, source, options) {\n\tvar destination = {};\n\tif (options.isMergeableObject(target)) {\n\t\tgetKeys(target).forEach(function(key) {\n\t\t\tdestination[key] = cloneUnlessOtherwiseSpecified(target[key], options);\n\t\t});\n\t}\n\tgetKeys(source).forEach(function(key) {\n\t\tif (propertyIsUnsafe(target, key)) {\n\t\t\treturn\n\t\t}\n\n\t\tif (propertyIsOnObject(target, key) && options.isMergeableObject(source[key])) {\n\t\t\tdestination[key] = getMergeFunction(key, options)(target[key], source[key], options);\n\t\t} else {\n\t\t\tdestination[key] = cloneUnlessOtherwiseSpecified(source[key], options);\n\t\t}\n\t});\n\treturn destination\n}\n\nfunction deepmerge(target, source, options) {\n\toptions = options || {};\n\toptions.arrayMerge = options.arrayMerge || defaultArrayMerge;\n\toptions.isMergeableObject = options.isMergeableObject || isMergeableObject;\n\t// cloneUnlessOtherwiseSpecified is added to `options` so that custom arrayMerge()\n\t// implementations can use it. The caller may not replace it.\n\toptions.cloneUnlessOtherwiseSpecified = cloneUnlessOtherwiseSpecified;\n\n\tvar sourceIsArray = Array.isArray(source);\n\tvar targetIsArray = Array.isArray(target);\n\tvar sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;\n\n\tif (!sourceAndTargetTypesMatch) {\n\t\treturn cloneUnlessOtherwiseSpecified(source, options)\n\t} else if (sourceIsArray) {\n\t\treturn options.arrayMerge(target, source, options)\n\t} else {\n\t\treturn mergeObject(target, source, options)\n\t}\n}\n\ndeepmerge.all = function deepmergeAll(array, options) {\n\tif (!Array.isArray(array)) {\n\t\tthrow new Error('first argument should be an array')\n\t}\n\n\treturn array.reduce(function(prev, next) {\n\t\treturn deepmerge(prev, next, options)\n\t}, {})\n};\n\nvar deepmerge_1 = deepmerge;\n\nmodule.exports = deepmerge_1;\n", "import merge from 'deepmerge'\nimport { Store, MutationPayload, Plugin } from 'vuex'\nimport { PersisterOptions, GetSavedState, GetSavedStateUnion, SaveState, RehydrateState } from './PersisterOptions'\n\n/**\n * The main vuex persister class\n */\nexport default class VuexPersister<State> implements PersisterOptions<State> {\n  key: string\n  statesToPersist: string[]\n  persist: Plugin<State>\n  storage: Storage\n  overwrite: boolean\n  getState: (key: string, storage: Storage) => GetSavedStateUnion<State>\n  saveState: (key: string, state: State, storage: Storage) => void\n  reducer: (statesToPersist: string[], state: State) => any\n\n  constructor (options?: PersisterOptions<State>) {\n    this.key = options?.key ?? 'vuex'\n    this.statesToPersist = options?.statesToPersist ?? []\n    this.overwrite = options?.overwrite ?? false\n    this.storage = options?.storage ?? (window?.localStorage ?? localStorage)\n    this.getState = options?.getState ?? this.getSavedState\n    this.saveState = options?.saveState ?? this.saveCurrentState\n    this.reducer = options?.reducer ?? this.stateReducer\n    this.persist = (store: Store<State>) : void => {\n      this.rehydrateState(this.overwrite, store, this.key, this.storage)\n      this.subscriber(store)((mutation: MutationPayload, state: State) => {\n        this.saveState(this.key, this.reducer(this.statesToPersist, state), this.storage)\n      })\n    }\n  }\n\n  /**\n   * Rehydrates the state whenever there is a saved state\n   * @param {boolean} overwrite - Whether to overwrite existing state or not\n   * @param {Store} store - The store instance\n   * @param {string} key - The storage key\n   * @param {Storage} storage - The storage instance\n   * @return {void}\n   */\n  rehydrateState: RehydrateState<State> = (overwrite: boolean, store: Store<State>, key: string, storage: Storage) : void => {\n    const SAVED_STATE = this.getSavedState(key, storage)\n    if (SAVED_STATE) {\n      store.replaceState(this.overwrite\n        ? SAVED_STATE\n        : merge(store.state, SAVED_STATE, {\n          arrayMerge: (store: any, saved: GetSavedStateUnion<any>) => saved\n        })\n      )\n    }\n  }\n\n  /**\n   * Saves the state on the storage\n   * @param {string} key - The storage key\n   * @param {State} state - The state to save\n   * @param {Storage} storage - The storage to which to save the state\n   * @returns {void}\n   */\n  private saveCurrentState: SaveState<State> = (key: string, state: State, storage: Storage) : void => {\n    storage.setItem(key, JSON.stringify(state))\n  }\n\n  /**\n   * Gets the saved state\n   * @param {string} key - The storage key\n   * @param {Storage} storage - The storage to which to save the state\n   * @returns {object|undefined} - The saved state\n   */\n  private getSavedState: GetSavedState<State> = (key: string, storage: Storage) : GetSavedStateUnion<State> => {\n    const STATE_VALUE = storage.getItem(key)\n    try {\n      let STATE: GetSavedStateUnion<State>\n      switch (typeof STATE_VALUE) {\n        case 'string':\n          STATE = JSON.parse(STATE_VALUE)\n          break\n        case 'object':\n          STATE = STATE_VALUE\n          break\n        default:\n          STATE = null\n          break\n      }\n      return STATE\n    } catch (err) {\n      return null\n    }\n  }\n\n  /**\n   * Returns the state to persist based on specified states to be persisted\n   * @param statesToPersist - An array of states to be persisted\n   * @param state - The existing state\n   * @returns {State} - The state to be persisted\n   */\n  private stateReducer = (statesToPersist: string[], state: State) => statesToPersist.length > 0\n    ? statesToPersist.length === 1\n      ? this.reducedStatePair(statesToPersist[0], state)\n      : statesToPersist.reduce((prev: string, curr: string) => merge(this.reducedStatePair(prev, state),\n        this.reducedStatePair(curr, state)) as any)\n    : state\n\n  /**\n   * Creates a key-value pair of state objects, based on the specified states to save\n   * @param stateKey - The specified key in the state that needs to be persisted\n   * @param state - The existing state\n   * @return {object} - The state key-value pair that will be persisted\n   */\n  private reducedStatePair = (stateKey: string, state: State) => {\n    return { [this.reducedStateKey(stateKey)]: this.reducedStateValue(stateKey, state) }\n  }\n\n  /**\n   * Returns the key for the state to be persisted\n   * @param targetState - Target state to be persisted\n   * @return {string} -The state key (to be persisted)\n   */\n  private reducedStateKey = (targetState: string): string => /\\./.test(targetState)\n    ? targetState.split('.')[0]\n    : targetState\n\n  /**\n   * Returns the value for the state key to be persisted\n   * @param targetState - Target state to be persisted\n   * @param state - Existing state\n   * @return {any} - The state value to be persisted\n   */\n  private reducedStateValue = (targetState: string, state: any): any => {\n    if (/\\./.test(targetState)) {\n      const splitPathModule: string[] = targetState.split('.')\n      return { [splitPathModule[1]]: state[splitPathModule[0]][splitPathModule[1]] }\n    } else {\n      return state[targetState]\n    }\n  }\n\n  /**\n   * Exposes hooks for each mutation - called after every mutation\n   * @param {object} store - The store instance\n   * @returns {function} - The store.subscribe function that is called after every mutation\n   */\n  private subscriber = (store: Store<State>) => (handler: (mutation: MutationPayload, state: State) => any) => store.subscribe(handler)\n}\n"],
  "mappings": "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",
  "names": ["isMergeableObject", "merge", "store"]
}
